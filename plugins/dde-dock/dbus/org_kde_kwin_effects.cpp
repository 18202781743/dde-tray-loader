/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Effects -p generated/org_kde_kwin_effects ../xml/org.kde.kwin.Effects.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "org_kde_kwin_effects.h"

/*
 * Implementation of interface class __Effects
 */

class __EffectsPrivate
{
public:
   __EffectsPrivate() = default;

    // begin member variables
    QStringList activeEffects;
    QStringList listOfEffects;
    QStringList loadedEffects;

public:
    QMap<QString, QDBusPendingCallWatcher *> m_processingCalls;
    QMap<QString, QList<QVariant>> m_waittingCalls;
};

__Effects::__Effects(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent)
    : DBusExtendedAbstractInterface(service, path, staticInterfaceName(), connection, parent)
    , d_ptr(new __EffectsPrivate)
{
    connect(this, &__Effects::propertyChanged, this, &__Effects::onPropertyChanged);

}

__Effects::~__Effects()
{
    const auto &list = d_ptr->m_processingCalls.values();
    qDeleteAll(list);
    delete d_ptr;
}

void __Effects::onPropertyChanged(const QString &propName, const QVariant &value)
{
    if (propName == QStringLiteral("activeEffects"))
    {
        const QStringList &activeEffects = qvariant_cast<QStringList>(value);
        if (d_ptr->activeEffects != activeEffects)
        {
            d_ptr->activeEffects = activeEffects;
            Q_EMIT ActiveEffectsChanged(d_ptr->activeEffects);
        }
        return;
    }

    if (propName == QStringLiteral("listOfEffects"))
    {
        const QStringList &listOfEffects = qvariant_cast<QStringList>(value);
        if (d_ptr->listOfEffects != listOfEffects)
        {
            d_ptr->listOfEffects = listOfEffects;
            Q_EMIT ListOfEffectsChanged(d_ptr->listOfEffects);
        }
        return;
    }

    if (propName == QStringLiteral("loadedEffects"))
    {
        const QStringList &loadedEffects = qvariant_cast<QStringList>(value);
        if (d_ptr->loadedEffects != loadedEffects)
        {
            d_ptr->loadedEffects = loadedEffects;
            Q_EMIT LoadedEffectsChanged(d_ptr->loadedEffects);
        }
        return;
    }

    return;
}

QStringList __Effects::activeEffects()
{
    return qvariant_cast<QStringList>(internalPropGet("activeEffects", &d_ptr->activeEffects));
}

QStringList __Effects::listOfEffects()
{
    return qvariant_cast<QStringList>(internalPropGet("listOfEffects", &d_ptr->listOfEffects));
}

QStringList __Effects::loadedEffects()
{
    return qvariant_cast<QStringList>(internalPropGet("loadedEffects", &d_ptr->loadedEffects));
}

void __Effects::CallQueued(const QString &callName, const QList<QVariant> &args)
{
    if (d_ptr->m_waittingCalls.contains(callName))
    {
        d_ptr->m_waittingCalls[callName] = args;
        return;
    }
    if (d_ptr->m_processingCalls.contains(callName))
    {
        d_ptr->m_waittingCalls.insert(callName, args);
    } else {
        QDBusPendingCallWatcher *watcher = new QDBusPendingCallWatcher(asyncCallWithArgumentList(callName, args));
        connect(watcher, &QDBusPendingCallWatcher::finished, this, &__Effects::onPendingCallFinished);
        d_ptr->m_processingCalls.insert(callName, watcher);
    }
}

void __Effects::onPendingCallFinished(QDBusPendingCallWatcher *w)
{
    w->deleteLater();
    const auto callName = d_ptr->m_processingCalls.key(w);
    Q_ASSERT(!callName.isEmpty());
    if (callName.isEmpty())
        return;
    d_ptr->m_processingCalls.remove(callName);
    if (!d_ptr->m_waittingCalls.contains(callName))
        return;
    const auto args = d_ptr->m_waittingCalls.take(callName);
    CallQueued(callName, args);
}
