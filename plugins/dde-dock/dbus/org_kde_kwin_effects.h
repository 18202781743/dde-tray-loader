/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Effects -p generated/org_kde_kwin_effects ../xml/org.kde.kwin.Effects.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_KDE_KWIN_EFFECTS_H
#define ORG_KDE_KWIN_EFFECTS_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface org.kde.kwin.Effects
 */
class __EffectsPrivate;
class __Effects : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "org.kde.kwin.Effects"; }

public:
    explicit __Effects(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__Effects();

    Q_PROPERTY(QStringList activeEffects READ activeEffects NOTIFY ActiveEffectsChanged)
    QStringList activeEffects();

    Q_PROPERTY(QStringList listOfEffects READ listOfEffects NOTIFY ListOfEffectsChanged)
    QStringList listOfEffects();

    Q_PROPERTY(QStringList loadedEffects READ loadedEffects NOTIFY LoadedEffectsChanged)
    QStringList loadedEffects();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> isEffectLoaded(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("isEffectLoaded"), argumentList);
    }



    inline QDBusPendingReply<bool> loadEffect(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("loadEffect"), argumentList);
    }



    inline QDBusPendingReply<> unloadEffect(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("unloadEffect"), argumentList);
    }

    inline void unloadEffectQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("unloadEffect"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    // begin property changed signals
    void ActiveEffectsChanged(const QStringList & value) const;
    void ListOfEffectsChanged(const QStringList & value) const;
    void LoadedEffectsChanged(const QStringList & value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __EffectsPrivate *d_ptr;
};

namespace org {
  namespace kde {
    namespace kwin {
      typedef ::__Effects Effects;
    }
  }
}
#endif
